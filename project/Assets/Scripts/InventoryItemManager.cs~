/*	This file is part of 1812: La aventura.

    1812: La aventura is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    1812: La aventura is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 1812: La aventura.  If not, see <http://www.gnu.org/licenses/>.
*/

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class InventoryItemManager : MonoBehaviour {
	private static InventoryItemManager instance;

	public int maxItemsCapacity = 7;
	public int itemsCount = 0;
	private float widthBetweenItems = 40f;
	private GameObject[] items = null;

	public static InventoryItemManager Instance{
		get{
			return instance;
		}
	}

	void OnApplicationQuit(){
		instance = null;
	}

	private void Awake(){
		if(instance == null){
			instance = this;
		}
		else if(instance != this){
			Destroy(this.gameObject);
			return;
		}

		if(Application.loadedLevel == 1){
			DisableInventory();
		}
	}

	private void Start(){
		items = new GameObject[maxItemsCapacity];
		//this.AddItem("FailedTestInventory");
		DontDestroyOnLoad(this.gameObject);
	}

	private void OnEnable(){
		Player.addItemToInventory += AddItem;
		Player.removeItemOfInventory += RemoveItem;
		GameStateManager.enableInventory += EnableInventory;
		GameStateManager.disableInventory += DisableInventory;
	}
	
	private void Ondisable(){
		Player.addItemToInventory -= AddItem;
		Player.removeItemOfInventory -= RemoveItem;
		GameStateManager.enableInventory -= EnableInventory;
		GameStateManager.disableInventory -= DisableInventory;
	}
	
	public void EnableInventory(){
		this.transform.position = new Vector2(0f, 0f);
		this.GetComponent<OpenCloseInventory>().ClosedInventory();
	}
	
	public void DisableInventory(){
		this.transform.position = new Vector2(0f, -10f);
		this.GetComponent<OpenCloseInventory>().ClosedInventory();
	}

	public List<GameObject> GetItems(){
		List<GameObject> currentItemsOnInventory = new List<GameObject>();

		for(int index = 0; index < items.Length; index++){
			if(items[index] != null){
				currentItemsOnInventory.Add(items[index]);
			}
		}

		return currentItemsOnInventory;
	}

	public void AddItem(string itemInventory){
		string _nameItemInventory = itemInventory;
		Vector2 _originalItemPosition = this.transform.FindChild("OriginalItemPosition").transform.position;
		if(itemsCount != maxItemsCapacity){
			int _indexOfFirstEmptySpaceOnInventory = 0;
			while(items[_indexOfFirstEmptySpaceOnInventory] != null && _indexOfFirstEmptySpaceOnInventory < maxItemsCapacity){
				_indexOfFirstEmptySpaceOnInventory++;
			}
			Debug.Log("InventoryItemManager: AddItem: Index of insertion " + _indexOfFirstEmptySpaceOnInventory.ToString());
			if(_indexOfFirstEmptySpaceOnInventory < maxItemsCapacity){
				GameObject _itemToLoad = Resources.Load<GameObject>("Prefabs/Inventory/Items/" + _nameItemInventory);
				_itemToLoad.transform.position = new Vector2(_originalItemPosition.x + _indexOfFirstEmptySpaceOnInventory * widthBetweenItems, _originalItemPosition.y);
				GameObject _newItemAdded = Instantiate(_itemToLoad) as GameObject;
				_newItemAdded.name = _nameItemInventory;
				_newItemAdded.transform.parent = this.transform;
				items[_indexOfFirstEmptySpaceOnInventory] = _newItemAdded;
				itemsCount++;
			}
		}
	}

	public void RemoveItem(ItemInventory itemInventory){
		Debug.Log("InventoryItemManager:RemoveItem");
		GameObject _itemToDestroy = itemInventory.gameObject;
		int _indexOfItemToRemove = 0;
		while(items[_indexOfItemToRemove].name != _itemToDestroy.name && _indexOfItemToRemove < maxItemsCapacity){
			_indexOfItemToRemove++;
		}
		if(_indexOfItemToRemove < maxItemsCapacity){
			items[_indexOfItemToRemove] = null;
			Destroy(_itemToDestroy);
			itemsCount--;
		}

	}
}
