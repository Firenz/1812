using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class TextActor : MonoBehaviour {
	/*
	private static TextActor instance;
	
	public static TextActor Instance{
		get{
			if(instance == null){
				//instance = new GameObject("TextActor").AddComponent<TextActor>();
				DontDestroyOnLoad(instance.gameObject);
			}
			return instance;
		}
	}
	*/

	public GUIStyle textStyle;
	public float secondsDisplayingText = 1.5f;
	public bool hasEndedSpeaking = true;
	private float startTime;
	private float currentTime;
	private TextLocalization localizationScript; //To be fixed in future
	private string displayingText;
	private Vector2 positionGUI;
	private Rect labelRect;
	private int lineLength = 20;
	private bool skipDialogue = false;
	private bool hasEndedDisplayingText = true;
	//private int numberOfLines = 1;
	//private int maxWordsPerLine = 3; //For future usage
	//private int maxLinesPerDialog = 2; //For future usage

	/*
	private void Awake() {
		Debug.Log("TextActor: Awake: init");
		if(instance == null){
			instance = this;
			DontDestroyOnLoad(this);
			Initialize();
		}
		else{
			if(this != instance){
				Destroy(this.gameObject);
			}
		}
	}
	*/

	// Use this for initialization
	private void Awake() {
		localizationScript = GameObject.Find("GameController").GetComponent<TextLocalization>();
		displayingText = "";
		//mouseEvent = Event.current;
	}
	
	// Update is called once per frame
	private void Update () {

	}

	public void DisplayText(string groupID, string nameID, string stringID, float positionX, float positionY){
		List<string> dialogueData = new List<string>();
		dialogueData.Add(groupID);
		dialogueData.Add(nameID);
		dialogueData.Add(stringID);

		Vector2 position = new Vector2(positionX, positionY);
		
		StartCoroutine(WaitForDialogueToEnd(dialogueData, position));
	}

	public void DisplayText(string groupID, string nameID, string stringID, Vector2 position){
		List<string> dialogueData = new List<string>();
		dialogueData.Add(groupID);
		dialogueData.Add(nameID);
		dialogueData.Add(stringID);
		
		StartCoroutine(WaitForDialogueToEnd(dialogueData, position));
	}

	public void DisplayText(List<string> dialogueData, float positionX, float positionY){
		Vector2 position = new Vector2(positionX, positionY);

		StartCoroutine(WaitForDialogueToEnd(dialogueData, position));
	}

	public void DisplayText(List<string> dialogueData, Vector2 position){
		StartCoroutine(WaitForDialogueToEnd(dialogueData, position));
	}

	private IEnumerator WaitForDialogueToEnd(List<string> dialogueData, Vector2 position){
		positionGUI = Camera.main.WorldToScreenPoint(new Vector3(position.x, position.y, 0f));
		positionGUI.y = Screen.height - positionGUI.y;

		hasEndedSpeaking = false;
		hasEndedDisplayingText = false;
		//textStyle.fontSize = ScaleAllGUI.ScalateFontSize(textStyle.fontSize);
		List<string> localizedAndFormatedConversation = new List<string>();
		//Debug.Log("TextActor: WaitForDialogueToEnd: dialogueData: " + dialogueData.ToString());
		localizedAndFormatedConversation = localizationScript.GetLocalizedText(dialogueData[0], dialogueData[1], dialogueData[2]);
		localizedAndFormatedConversation = ReestructureDialogInSmallerStrings(localizedAndFormatedConversation);
		foreach(string lineDialogue in localizedAndFormatedConversation){
			skipDialogue = false;
			displayingText = lineDialogue;
			startTime = Time.time;
			do{
				currentTime = Time.time;
				yield return null;
			}while((currentTime - startTime) <= secondsDisplayingText && skipDialogue != true);
		}
		skipDialogue = false;
		displayingText = "";
		hasEndedSpeaking = true;
		hasEndedDisplayingText = true;
	}

	private List<string> ReestructureDialogInSmallerStrings(List<string> conversation){

		List<string> reestructuredConversation = new List<string>();
		foreach(string dialog in conversation){
			string[] words = dialog.Split(" "[0]);
			string resultedLine = "";
			string word = "";
			for(int index = 0; index < words.Length; index++){
				word = words[index].Trim();
				if(index == 0){
					resultedLine += words[0];
				}
				if(index > 0){
					resultedLine += " " + word;
				}
				if(resultedLine.Length > lineLength){
					resultedLine = resultedLine.Substring(0, resultedLine.Length - (word.Length));
					reestructuredConversation.Add(resultedLine);
					resultedLine = word;
				}
			}
			
			//Debug.Log(resultedLine.ToString());
			reestructuredConversation.Add(resultedLine);
		}
		
		return reestructuredConversation;
	}

	public bool HasEndedDisplayingText(){
		return hasEndedDisplayingText;
	}

	void OnGUI(){

		if(displayingText != ""){
			Event mouseEvent = Event.current;
			if(mouseEvent.isMouse && mouseEvent.type == EventType.MouseDown && mouseEvent.clickCount == 2){
				skipDialogue = true;
				mouseEvent.clickCount = 0;
			}

			labelRect = GUILayoutUtility.GetRect(new GUIContent(displayingText), textStyle);
			labelRect.center = positionGUI;
			GUI.Label(new Rect(labelRect.x, labelRect.y, labelRect.width + Screen.width * 0.01f * 2f, labelRect.height + Screen.height * 0.01f), displayingText, textStyle);
			
		}
	}

	/*
	private void OnDestroy () {
		if (instance == this) {
			instance = null;
		}
	}


	public void OnApplicationQuit(){
		instance = null;
	}
	*/
}
