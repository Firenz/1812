using UnityEngine;
using System.Collections;

public class PlayerStateController : ActorStateController {
	public Player player;
	
	private enum playerStates{
		leftIdle = 0,
		rightIdle,
		leftWalking,
		rightWalking,
		leftSpeaking,
		rightSpeaking,
		leftUpperGrabbing,
		rightUpperGrabbing,
		leftBottomGrabbing,
		rightBottomGrabbing
		//leftUsingPhone, To be implemented
		//rightUsingPhone To be implemented
	}
	
	protected playerStates currentState;
	protected playerStates previousState;
	private bool isPlayerGrabbingUpperObject = false;
	private bool isPlayerGrabbingBottomObject = false;
	private bool hasPlayerEndedGrabbing = true;
	
	protected override void ActionStateHandler(){
		isActorSpeaking = player.isSpeaking;
		hasActorEndedSpeaking = player.hasEndedSpeaking;
		isPlayerGrabbingUpperObject = player.isGrabbingUpperObject;
		isPlayerGrabbingBottomObject = player.isGrabbingBottomObject;
		hasPlayerEndedGrabbing = player.hasEndedGrabbing;
		
		if(!player.isSpeaking && !player.isGrabbingUpperObject && !player.isGrabbingBottomObject){
			
			switch(currentState){
			case playerStates.leftWalking:
				//if(OnStateChange != null){
				OnStateChange(playerStates.leftIdle);
				//}
				break;
				
			case playerStates.rightWalking:
				//if(OnStateChange != null){
				OnStateChange(playerStates.rightIdle);
				//}
				break;
				
			case playerStates.leftIdle:
				break;
				
			case playerStates.rightIdle:
				break;
				
			case playerStates.leftSpeaking:
				//if(OnStateChange != null){
				OnStateChange(playerStates.leftIdle);
				//}
				break;
				
			case playerStates.rightSpeaking:
				//if(OnStateChange != null){
				OnStateChange(playerStates.rightIdle);
				//}
				break;
			}
			
		}
		else if(isActorSpeaking){
			if(hasActorEndedSpeaking){
				
				switch(currentState){
				case playerStates.leftSpeaking:
					OnStateChange(playerStates.leftIdle);
					break;
					
				case playerStates.rightSpeaking: 
					OnStateChange(playerStates.rightIdle);
					break;
				}
				
			}
			else{
				
				switch(currentState){
				case playerStates.leftIdle:
					OnStateChange(playerStates.leftSpeaking);
					break;
					
				case playerStates.leftWalking:
					OnStateChange(playerStates.leftSpeaking);
					break;
					
				case playerStates.rightIdle: 
					OnStateChange(playerStates.rightSpeaking);
					break;
					
				case playerStates.rightWalking:
					OnStateChange(playerStates.rightSpeaking);
					break;
				}
				
			}
			
		}
		else if(isPlayerGrabbingUpperObject){
			if(hasPlayerEndedGrabbing){
				switch(currentState){
				case playerStates.leftUpperGrabbing:
					OnStateChange(playerStates.leftIdle);
					break;
					
				case playerStates.rightUpperGrabbing:
					OnStateChange(playerStates.rightIdle);
					break;
				}
			}
			else{
				
			}
			
		}
		else if(isPlayerGrabbingBottomObject){
			if(hasPlayerEndedGrabbing){
				switch(currentState){
				case playerStates.leftBottomGrabbing:
					OnStateChange(playerStates.leftIdle);
					break;
					
				case playerStates.rightBottomGrabbing:
					OnStateChange(playerStates.rightIdle);
					break;
				}
			}
			else{
				WaitForAnimation(actorAnimator.animation);
				hasPlayerEndedGrabbing = true;
			}
		}
	}
	
	protected override void OnStateChange(playerStates newState){
		if(newState == currentState){
			return;
		}
		
		switch(newState){
		case playerStates.leftIdle:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.rightIdle:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.leftWalking:
			actorAnimator.SetBool("isLeftWalking", true);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.rightWalking:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", true);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.leftSpeaking:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",true);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.rightSpeaking:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",true);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.rightUpperGrabbing:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", true);
			actorAnimator.SetBool("isBottomGrabbing", false);
			break;
			
		case playerStates.leftUpperGrabbing:
			actorAnimator.SetBool("isLeftWalking", false);
			actorAnimator.SetBool("isRightWalking", false);
			actorAnimator.SetBool("isSpeaking",false);
			actorAnimator.SetBool("isUpperGrabbing", false);
			actorAnimator.SetBool("isBottomGrabbing", true);
			break;
		}
		
		previousState = currentState;
		currentState = newState;
	}
	
}
