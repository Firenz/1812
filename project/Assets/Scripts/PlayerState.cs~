/*	This file is part of 1812: La aventura.

    1812: La aventura is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    1812: La aventura is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 1812: La aventura.  If not, see <http://www.gnu.org/licenses/>.
*/

using UnityEngine;
using System.Collections;

[RequireComponent (typeof(Player))]
public class PlayerState : MonoBehaviour {
	private Player player;

	/*
	public enum playerStates{
		leftIdle = 0,
		rightIdle,
		leftWalking,
		rightWalking,
		leftSpeaking,
		rightSpeaking,
		leftUpperGrabbing,
		rightUpperGrabbing,
		leftBottomGrabbing,
		rightBottomGrabbing,
		leftUsingPhone, //To be implemented
		rightUsingPhone //To be implemented
	}
	*/

	protected PlayerStates currentState;
	protected PlayerStates previousState;

	protected Animator playerAnimator = null;
	protected float previousAnimatorSpeed;
	protected Vector2 playerMoveDirection;
	protected bool isDirectionToGoReached = true;
	protected bool isSpeaking = false;
	protected bool hasEndedSpeaking = true;
	private bool isInteracting = false;
	private bool isGrabbingUpperObject = false;
	private bool isGrabbingBottomObject = false;
	private bool hasEndedGrabbing = true;
	private bool isUsingPhone = false;
	public bool isFacingLeft = true;
	public bool isFacingRight = false;
	//private bool hasEndedManipulatingMechanism = true;
	
	protected void Start(){
		//actor = this.GetComponent<Actor>();
		playerAnimator = this.GetComponent<Animator>();
		player = this.GetComponent<Player>();
		previousAnimatorSpeed = playerAnimator.speed;
		currentState = PlayerStates.leftIdle;
		previousState = currentState;
		OnStateChange(PlayerStates.leftIdle);
	}

	protected void Update(){
		playerMoveDirection = player.moveDirection;
		isDirectionToGoReached = player.isDirectionToGoReached;
		
		if(!isDirectionToGoReached){
			if(playerMoveDirection.x > 0f){
				OnStateChange(PlayerStates.rightWalking);
				currentState = PlayerStates.rightWalking;
				player.isFacingRight = true;
				player.isFacingLeft = false;
			}
			else if(playerMoveDirection.x < 0f){
				OnStateChange(PlayerStates.leftWalking);
				currentState = PlayerStates.leftWalking;
				player.isFacingRight = false;
				player.isFacingLeft = true;
			}
			
		}
		else if(isDirectionToGoReached){
			this.ActionStatesHandler();
		}
	}

	protected void ActionStatesHandler(){
		isInteracting = player.isInteracting;
		isSpeaking = player.isSpeaking;
		hasEndedSpeaking = player.hasEndedSpeaking;
		isGrabbingUpperObject = player.isGrabbingUpperObject;
		isGrabbingBottomObject = player.isGrabbingBottomObject;
		hasEndedGrabbing = player.hasEndedGrabbing;
		isUsingPhone = player.isUsingPhone;
		isFacingLeft = player.isFacingLeft;
		isFacingRight = player.isFacingRight;

		if(!isSpeaking && !isInteracting){

			if(isUsingPhone){
				switch(currentState){
				default:
					break;
				case PlayerStates.leftIdle:
					OnStateChange(PlayerStates.leftUsingPhone);
					break;

				case PlayerStates.rightIdle:
					OnStateChange(PlayerStates.rightUsingPhone);
					break;
				}
			}
			else{
				switch(currentState){
				case PlayerStates.leftWalking:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightWalking:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftIdle:
					break;
					
				case PlayerStates.rightIdle:
					break;
					
				case PlayerStates.leftSpeaking:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightSpeaking:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftUpperGrabbing:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightUpperGrabbing:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftBottomGrabbing:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightBottomGrabbing:
					OnStateChange(PlayerStates.rightIdle);
					break;
				case PlayerStates.leftUsingPhone:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightUsingPhone:
					OnStateChange(PlayerStates.rightIdle);
					break;
				}


				if(isFacingLeft && (currentState == PlayerStates.rightIdle)){
					OnStateChange(PlayerStates.leftIdle);
				}
				else if(isFacingRight && (currentState == PlayerStates.leftIdle)){
					OnStateChange(PlayerStates.rightIdle);
				}

			}
            
        }
        else if(isSpeaking){
			if(hasEndedSpeaking){
				switch(currentState){
				case PlayerStates.leftSpeaking:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightSpeaking: 
					OnStateChange(PlayerStates.rightIdle);
					break;
				}
				
			}
			else{
				switch(currentState){
				case PlayerStates.leftIdle:
					OnStateChange(PlayerStates.leftSpeaking);
					break;
					
				case PlayerStates.leftWalking:
					OnStateChange(PlayerStates.leftSpeaking);
					break;
					
				case PlayerStates.rightIdle: 
					OnStateChange(PlayerStates.rightSpeaking);
					break;
					
				case PlayerStates.rightWalking:
					OnStateChange(PlayerStates.rightSpeaking);
					break;
					
				case PlayerStates.leftUpperGrabbing:
					OnStateChange(PlayerStates.leftSpeaking);
					break;
					
				case PlayerStates.rightUpperGrabbing:
					OnStateChange(PlayerStates.rightSpeaking);
					break;
					
				case PlayerStates.leftBottomGrabbing:
					OnStateChange(PlayerStates.leftSpeaking);
					break;
					
				case PlayerStates.rightBottomGrabbing:
					OnStateChange(PlayerStates.rightSpeaking);
					break;

				case PlayerStates.rightSpeaking:
					break;

				case PlayerStates.leftSpeaking:
					break;
				}
			}

			
		}
		else if(isInteracting){
			Debug.Log("isInteracting");
			if(hasEndedGrabbing){
				switch(currentState){
				case PlayerStates.leftWalking:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightWalking:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftSpeaking:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightSpeaking:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftUpperGrabbing:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightUpperGrabbing:
					OnStateChange(PlayerStates.rightIdle);
					break;
					
				case PlayerStates.leftBottomGrabbing:
					OnStateChange(PlayerStates.leftIdle);
					break;
					
				case PlayerStates.rightBottomGrabbing:
					OnStateChange(PlayerStates.rightIdle);
					break;
				default:
					break;
				}
			}
			else{
				Debug.Log("isInteracting");
				if(isGrabbingUpperObject){
					Debug.Log("isGrabbingUpperObject");
					switch(currentState){
					case PlayerStates.leftIdle:
						OnStateChange(PlayerStates.leftUpperGrabbing);
						break;
						
					case PlayerStates.leftWalking:
						OnStateChange(PlayerStates.leftUpperGrabbing);
						break;
						
					case PlayerStates.rightIdle: 
						OnStateChange(PlayerStates.rightUpperGrabbing);
						break;
						
					case PlayerStates.rightWalking:
						OnStateChange(PlayerStates.rightUpperGrabbing);
						break;
						
					case PlayerStates.leftSpeaking:
						OnStateChange(PlayerStates.leftUpperGrabbing);
						break;
						
					case PlayerStates.rightSpeaking:
						OnStateChange(PlayerStates.rightUpperGrabbing);
						break;

					default:
						break;
					}
					//StartCoroutine(WaitForAnimation(this.animation));
				}
				else if(isGrabbingBottomObject){
					Debug.Log("isGrabbingBottomObject");
					switch(currentState){
					case PlayerStates.leftIdle:
						OnStateChange(PlayerStates.leftBottomGrabbing);
						break;
					
					case PlayerStates.rightIdle: 
						OnStateChange(PlayerStates.rightBottomGrabbing);
                        break;

					case PlayerStates.leftWalking:
						OnStateChange(PlayerStates.leftBottomGrabbing);
						break;
						
					case PlayerStates.rightWalking:
						OnStateChange(PlayerStates.rightBottomGrabbing);
						break;
						
					case PlayerStates.leftSpeaking:
						OnStateChange(PlayerStates.leftBottomGrabbing);
						break;
						
					case PlayerStates.rightSpeaking:
						OnStateChange(PlayerStates.rightBottomGrabbing);
						break;

					default:
						break;
					}
					//StartCoroutine(WaitForAnimation(this.animation));
				}
				else if(isUsingPhone){
					Debug.Log("isUsingPhone");
					switch(currentState){
					default:
                    	break;
                    case PlayerStates.leftIdle:
						OnStateChange(PlayerStates.leftUsingPhone);
						break;
					
					case PlayerStates.rightWalking:
						OnStateChange(PlayerStates.rightUsingPhone);
                        break;
					
                    }
				}
			}

		}

		
	}

	protected void OnStateChange(PlayerStates newState){
		if(newState == currentState){
			return;
		}
		
		switch(newState){
		case PlayerStates.leftIdle:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", true);
			playerAnimator.SetBool("isFacingRight", false);
			break;
			
		case PlayerStates.rightIdle:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", true);
			break;
			
		case PlayerStates.leftWalking:
			playerAnimator.SetBool("isLeftWalking", true);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;
			
		case PlayerStates.rightWalking:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", true);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;
			
		case PlayerStates.leftSpeaking:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",true);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;
			
		case PlayerStates.rightSpeaking:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",true);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;

		case PlayerStates.rightUpperGrabbing:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", true);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;
			
		case PlayerStates.leftUpperGrabbing:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", true);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;

		case PlayerStates.rightBottomGrabbing:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", true);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;

		case PlayerStates.leftBottomGrabbing:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", true);
			playerAnimator.SetBool("isUsingPhone", false);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;

		case PlayerStates.rightUsingPhone:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", true);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;

		case PlayerStates.leftUsingPhone:
			playerAnimator.SetBool("isLeftWalking", false);
			playerAnimator.SetBool("isRightWalking", false);
			playerAnimator.SetBool("isSpeaking",false);
			playerAnimator.SetBool("isUpperGrabbing", false);
			playerAnimator.SetBool("isBottomGrabbing", false);
			playerAnimator.SetBool("isUsingPhone", true);
			playerAnimator.SetBool("isFacingLeft", false);
			playerAnimator.SetBool("isFacingRight", false);
			break;
		}
		
		previousState = currentState;
		currentState = newState;
	}


	public void StopAnimation(float time){
		previousAnimatorSpeed = playerAnimator.speed;
		playerAnimator.speed = 0;
		if(time != 0.0f){
			StartCoroutine(WaitForStopAnimation(time));
		}
		playerAnimator.speed = previousAnimatorSpeed;
	}

	protected IEnumerator WaitForStopAnimation(float time){
		yield return new WaitForSeconds(time);
	}
}

public class PlayerStatesB : ActorStates{
	public const int leftUpperGrabbing = 6;
	public const int rightUpperGrabbing = 7;
	public const int leftBottomGrabbing = 8;
	public const int rightBottomGrabbing = 9;
	public const int leftUsingPhone = 10;
	public const int rightUsingPhone = 11;

	public PlayerStatesB(){}

	public PlayerStatesB(int value){
		Value = value;
	}

	public static implicit operator int(PlayerStatesB type){
		return type.Value;
	}
	
	public static implicit operator PlayerStatesB(int value){
		return new PlayerStatesB(value);
	}
}