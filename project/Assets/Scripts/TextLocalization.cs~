using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Linq;
using System.Text.RegularExpressions;

public class TextLocalization : MonoBehaviour {
	public static string currentLanguage = "ES";
	public TextAsset localizationFile;

	public static void ChangeCurrentLanguage(string newLanguage){
		currentLanguage = newLanguage;
    }

	void Start() {
		//string xmlPath = Application.dataPath + "/Resources/Data/Localization/" + currentLanguage + "/LocalizedTexts.xml";
		string xmlPath = "Data/Localization/" + currentLanguage + "/LocalizedTexts";
		XMLFileReader.OpenXMLFile(xmlPath);
		//XMLFileReader.OpenXMLFile(localizationFile);
	}

	public List<string> GetLocalizedText(string groupId , string elementId, string textId){
		string xmlPathToNode = "/localizedtexts/group[@id='" + groupId + "']/element[@id='" + elementId + "']/string[@id='" + textId + "']";
		List<string> localizedText = new List<string>();
		string rawText = XMLFileReader.GetNodeInfo(xmlPathToNode);
		//rawText = rawText.Replace('\t', '');
		//rawText = rawText.Replace("\r\n", "");
		char[] charsToBeRemoved = new char[] {'\t', '\n', ' ', '\r'};
		rawText = rawText.Trim(charsToBeRemoved);
		//rawText = rawText.Replace("\t", "");
		//rawText = rawText.Replace("\r", "");
		string[] textLines = rawText.Split('\n');
		//localizedText = textLines.ToList();
		for(int index = 0; index < textLines.Length; index++){
			localizedText.Add(textLines[index].Trim(charsToBeRemoved));
		}
        return localizedText;
	}
}

static class XMLFileReader {
	static XmlDocument root;
	
	public static void OpenXMLFile(string xmlPath) {
		//Debug.Log(xmlPath);
		TextAsset newTextAsset = (TextAsset)Resources.Load(xmlPath, typeof(TextAsset));
		//Debug.Log("TextAsset: " + newTextAsset.ToString());
		root = new XmlDocument();
		root.LoadXml(newTextAsset.text);

		//root = new XmlDocument();
		//root.Load(xmlPath);
	}

	public static void OpenXMLFile(TextAsset textAsset){
		//TextAsset newTextAsset = (TextAsset)Resources.Load("LocalizedTexts", typeof(TextAsset));
		Debug.Log("TextAsset Path: " + textAsset.ToString());
		root = new XmlDocument();
		root.LoadXml(textAsset.text);
	}

	public static void CloseXMLFile(string xmlPath) {
		root = null;
		GC.Collect();
		GC.WaitForPendingFinalizers();
	}
	
	public static string GetNodeInfo(string xmlPathToNode){
		string nodeText;
		try{
			nodeText = root.SelectSingleNode(xmlPathToNode).InnerText;
		} catch (NullReferenceException exception){
			nodeText = "[This string has either not been implemented or needs to be translated.]";
        }
        return nodeText;
    }
}


/*
public class TextLocalization {
	[XmlRoot("localizaton")]
	public class Localization {
		[XmlAttribute]
		public string language;
		[XmlElement("inventory")]
		public Inventory inventory;
		[XmlElement("scene")]
		public Scene[] scenes;
	}
	
	public class Inventory {
		[XmlElement("item")]
		public Item[] items;
	}
	
	public class Item {
		[XmlAttribute]
		public string name;
		[XmlElement("text")]
		public Text[] texts;
	}
	
	public class Scene {
		[XmlAttribute]
		public string name;
		[XmlElement("cutscene")]
		public Cutscene[] cutscenes;
		[XmlElement("interactive_object")]
		public Interactive_object[] objects;
	}
	
	public class Cutscene {
		[XmlAttribute]
		public string id;
		[XmlElement("text")]
		public Text texts;
	}
	
    public class Interactive_object {
        [XmlAttribute]
        public string name;
        [XmlElement("text")]
        public Text[] texts;
    }
    
    public class Text {
        [XmlAttribute]
        public string id;
		[XmlElement]
		public string[] strings;
	}

	public static string currentLanguage = "ES";
	public Localization localization;

	public static void ChangeCurrentLanguage(string newLanguage){
		currentLanguage = newLanguage;
	}


	public static void LoadLocalizationFile(){
		XmlSerializer xmlSerializer = new XmlSerializer<Localization>();
		if(CheckDirectory("Data/Localization/" + currentLanguage) == false) {
			Debug.LogError("ERROR: LOCALIZATION DIRECTORY IS MISSING");
		}
		else{
			FileStream stream = File.OpenRead("Data/Localization/" + currentLanguage + "/Texts.xml");
			localization = xmlSerializer.Deserialize(stream);
		}
	}

	static void UnloadPreviousLocalizationFile(){

	}

	bool CheckDirectory(string directory){

	}

}
*/

