using UnityEngine;
using System.Collections;

public class PlayerMovementController : MonoBehaviour {
	public TargetController targetScript;
	public Vector2 currentPosition;
	public Vector2 moveDirection;
	public Vector2 targetToFollowByPlayer;
	public bool isTargetReached;
	private float spriteWidth;
	private Transform thisTransform;
	private float distanceToTarget;
	private float permisiveErrorInCalculatingDistance = 2f;
	
	// Use this for initialization
	void Start () {
		thisTransform = this.transform;
		currentPosition = thisTransform.position;
		targetToFollowByPlayer = thisTransform.position;

		SpriteRenderer thisSpriteRenderer = this.gameObject.GetComponent<SpriteRenderer>();
		spriteWidth = thisSpriteRenderer.sprite.border.z - thisSpriteRenderer.sprite.border.x;
	}
	
	// Update is called once per frame
	void Update () {
		if(Input.GetMouseButtonDown(0)){
			targetToFollowByPlayer = targetScript.target;

			if(targetToFollowByPlayer.x > this.transform.position.x){
				targetToFollowByPlayer.x -= spriteWidth;
			}

			moveDirection = targetToFollowByPlayer - currentPosition;
			moveDirection.Normalize();

		}

		distanceToTarget = Vector2.Distance(currentPosition, targetToFollowByPlayer);

		if(distanceToTarget > permisiveErrorInCalculatingDistance){
			targetScript.isTargetReached = false;
			isTargetReached = false;
			currentPosition = thisTransform.position;
			thisTransform.position = new Vector3(thisTransform.position.x + moveDirection.x, thisTransform.position.y + moveDirection.y, 0.0f);
			
		}
		else{
			moveDirection = Vector2.zero;
			targetScript.isTargetReached = true;
			isTargetReached = true;
			/*if(targetScript.isTargetAnInteractivePoint){
			 * 	switch(targetScript.targetedInteractiveObject.interactiveTypes){
			 * 	case targetedInteractiveObjectHandler.interactiveTypes.description:
			 * 	Actor.Speak(InteractiveObjectHandler.descriptionObject);
			 * 	break;
			 * 
			 * 	case targetedInteractiveObjectHandler.interactiveTypes.upperPickable:
			 * 	Actor.UpperGrab(InteractiveObjectHandler.descriptionObject);
			 * 	break;
			 * 	}
			 * }
			 * 
			 */
		}
	}
	
}
