/*	This file is part of 1812: La aventura.

    1812: La aventura is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    1812: La aventura is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 1812: La aventura.  If not, see <http://www.gnu.org/licenses/>.
*/

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

[RequireComponent (typeof (SpriteRenderer))]
public class Actor : MonoBehaviour {
	public string groupID;
	public string nameID;

	public Vector2 talkingPosition = Vector2.zero;
	public Vector2 currentPosition;
	public Vector2 originalDirectionToGo;
	public Vector2 currentDirectionToGo;
	public Vector2 moveDirection;

	public bool isGoingToDirection = false;
	public bool isGoingToDirectionChanged = false;
	public bool isDirectionToGoReached = true;
	public bool isSpeaking = false;
	public bool hasEndedSpeaking = true;
	public bool isInteracting = false;
	public bool inConversation = false;
	public bool inCutScene = false;

	protected float movementSpeed = 1f;
	protected bool isAnimationEnded = false;
	protected float distanceToDirectionToGo = 0f;
	protected float spriteWidth;
	protected float permisiveErrorDistanceInReachingDirectionToGo = 1.1f;
	protected Transform thisTransform;
	protected TextActor textActor;
	protected Player player;

	protected float calculateSpriteWidth(){
		SpriteRenderer thisSpriteRenderer = this.gameObject.GetComponent<SpriteRenderer>();
		return thisSpriteRenderer.sprite.border.z - thisSpriteRenderer.sprite.border.x;
	}
	
	protected virtual void Awake(){
		
	}
	
	protected void Start () {
		textActor = this.transform.GetComponent<TextActor>();
		player = GameObject.FindGameObjectWithTag("Player").GetComponent<Player>();
		thisTransform = this.transform;
		//if(GameStateManager.Instance.currentGameState.playerPosition != Vector2.zero){
		//	thisTransform.position = GameStateManager.Instance.currentGameState.playerPosition;
		//}
		currentPosition = thisTransform.position;
		moveDirection = Vector2.zero;
		currentDirectionToGo = this.transform.position;
		spriteWidth = this.calculateSpriteWidth();
		InitializeData();
	}

	protected virtual void InitializeData(){

	}
	
	protected virtual void Update () {
		if(!isDirectionToGoReached){
			distanceToDirectionToGo = Mathf.Abs(Vector2.Distance(currentPosition, currentDirectionToGo));

			if(distanceToDirectionToGo > permisiveErrorDistanceInReachingDirectionToGo){
				currentPosition = thisTransform.position;
				thisTransform.position = new Vector2(thisTransform.position.x + moveDirection.x, thisTransform.position.y + moveDirection.y);
				
			}
			else{
				moveDirection = Vector2.zero;
				isDirectionToGoReached = true;
			}
		}
	}
	
	public void GoTo(Vector2 direction){
		StartCoroutine(WaitForGoToDirectionCompleted(direction));
	}
	
	protected IEnumerator WaitForGoToDirectionCompleted(Vector2 direction){
		do{
			yield return null;
		}while(!hasEndedSpeaking || isInteracting);
		
		Debug.Log("WaitForGoToDirection");
		isDirectionToGoReached = false;
		isGoingToDirection = true;
		currentDirectionToGo = direction;
		originalDirectionToGo = direction;

		
		if(currentDirectionToGo.x > (thisTransform.position.x + (spriteWidth * 0.5f))){
			currentDirectionToGo.x -= spriteWidth;
		}
		
		moveDirection = currentDirectionToGo - currentPosition;
		moveDirection.Normalize();
		
		//moveDirection *= 0.5f;
		moveDirection *= movementSpeed;
		
		do{
			yield return null;
		}while(!isDirectionToGoReached);

		isGoingToDirection = false;
	}

	public void Speak(string groupID, string nameID, string stringID){
		Debug.Log("Actor is Speaking");
		List<string> dialogueData = new List<string>();
		dialogueData.Add(groupID);
		dialogueData.Add(nameID);
		dialogueData.Add(stringID);

		StartCoroutine(WaitForSpeakCompleted(dialogueData));
	}

	public void Speak(List<string> dialogueData){
		StartCoroutine(WaitForSpeakCompleted(dialogueData));
	}

	protected  IEnumerator WaitForSpeakCompleted(string groupID, string nameID, string stringID){
		List<string> dialogueData = new List<string>();
		dialogueData.Add(groupID);
		dialogueData.Add(nameID);
		dialogueData.Add(stringID);
		yield return StartCoroutine(WaitForSpeakCompleted(dialogueData));
	}

	protected IEnumerator WaitForSpeakCompleted(List<string> dialogueData){
		do{
			yield return null;
		}while(!isDirectionToGoReached || isSpeaking);
		
		Debug.Log("WaitForSpeak");
		
		isSpeaking = true;
		hasEndedSpeaking = false;
        Vector2 textPosition = this.transform.GetChild(0).transform.position;
        textActor.DisplayText(dialogueData, textPosition.x, textPosition.y);
        do{
            //Debug.Log("WaitForSpeak: TextActor.hasEndedSpeaking " + TextActor.hasEndedSpeaking);
            yield return null;
        }while(!textActor.hasEndedSpeaking);
        Debug.Log("WaitForSpeak: TextActor.hasEndedSpeaking " + textActor.hasEndedSpeaking);
        hasEndedSpeaking = true;
        isSpeaking = false;
	}

	public void PlayAnimation(string nameOfAnimation, float timeOfAnimation = 0.0f){
		StartCoroutine(WaitForPlayAnimationCompleted(nameOfAnimation, timeOfAnimation));
	}	
	
	protected virtual IEnumerator WaitForPlayAnimationCompleted(string nameOfAnimation, float timeOfAnimation){
		do{
			yield return null;
		}while(!hasEndedSpeaking || isInteracting || isGoingToDirection);
		
		isInteracting = true;
		
		switch(nameOfAnimation){
		default:
			break;
		case "Walking":
			isGoingToDirection = true;
			yield return new WaitForSeconds(timeOfAnimation);
			isGoingToDirection = false;
			break;
		case "Speaking":
			isSpeaking = true;
                hasEndedSpeaking = false;
                yield return new WaitForSeconds(timeOfAnimation);
                isSpeaking = false;
                hasEndedSpeaking = true;
                break;
		}
		isInteracting = false;
	}

	public virtual void PlayIdleAnimation(){
		
    }

	protected IEnumerator WaitForAnimationToEnd(){
		do{
			yield return null;
		}while(!isAnimationEnded);
		isAnimationEnded = false;
	}
	
	protected void EndOfAnimation(){
        isAnimationEnded = true;
    }

	public virtual void LeftClickAction(){
		Player player = GameObject.FindGameObjectWithTag("Player").GetComponent<Player>();
		if(!player.isInteracting && !player.isSpeaking){
			player.GoTo(currentPosition);
			player.Speak(groupID, nameID, "DESCRIPTION");
		}
	}
	
	public virtual void RightClickAction(){
		Player player = GameObject.FindGameObjectWithTag("Player").GetComponent<Player>();
		if(!player.isInteracting && !player.isSpeaking){
			player.GoTo(currentPosition);
			player.Speak(groupID, nameID, "INTERACTION");
		}
	}
}


