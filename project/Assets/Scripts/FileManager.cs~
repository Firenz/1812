using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Security.Cryptography;
using UnityEditor;

public class FileManager : MonoBehaviour {
	//private static FileManager instance; //Instance of the FileManager;
	protected string path; //Holds the application path

	/*
	public static FileManager Instance{
		get{
			if(instance == null){
				instance = new GameObject("FileManagerObject").AddComponent<FileManager>();
			}
			return instance;
		}
	}


	public void OnApplicationQuit() {
		DestroyInstance();
	}

	public void DestroyInstance() {
		Debug.Log("Instance destroyed");
		//instance = null;
	}
	*/

	public virtual void Initialize() {
		Debug.Log("File Manager initialized");
		path = Application.dataPath;
		Debug.Log("Path: " + path);
	}

	public bool CheckDirectory(string directory) {
		if(Directory.Exists(path + "/" + directory)){
			return true;
		}
		else{
			return false;
		}
	}

	public void CreateDirectory(string directory){
		if(CheckDirectory(directory) == false){
			Debug.Log("Creating directory: " + directory);
			Directory.CreateDirectory(path + "/" + directory);
		}
		else{
			Debug.LogError("Error: You are trying to create the directory " + directory + " but it already exists!");
		}
	}

	/*
	public void DeleteDirectory(string directory){
		if(CheckDirectory(directory) == false){
			Debug.Log("Deleting directory: " + directory);
			Directory.Delete(path + "/" + directory, true);
		}
		else{
			Debug.LogError("Error: You are trying to delete the directory " + directory + " but it does not exist!");
		}
	}
	*/

	public void MoveDirectory(string originalDestination, string newDestination){
		if(CheckDirectory(originalDestination) == true && CheckDirectory(newDestination) == false){
			Debug.Log("Moving directory: " + originalDestination);
			Directory.Move(path + "/" + originalDestination, path + "/" + newDestination);
		}
		else{
			Debug.LogError("Error: You are trying to move a directory but it either does not exist or a folder of the same name already exists");
		}
	}

	public string[] FindSubDirectories(string directory, string searchPattern = "*"){
		Debug.Log("Checking directory " + directory + " for subdirectories");
		string[] subdirectoryList = Directory.GetDirectories(path + "/" + directory, searchPattern);
		return subdirectoryList;
	}

	public string[] FindFiles(string directory, string searchPattern = "*"){
		Debug.Log("Checking directory " + directory + " for files");
		string[] fileList = Directory.GetFiles(path + "/" + directory, searchPattern);
		return fileList;
	}

	public bool CheckFile(string filePath){
		if(File.Exists(path + "/" + filePath)){
			return true;
		}
		else{
			return false;
		}
	}

	public void CreateFile(string directory, string filename, string filetype, string fileData){
		Debug.Log("Creating " + directory + "/" + filename + "." + filetype);
		if(CheckDirectory(directory) == true){
			if(CheckFile(path + "/" + directory + "/" + filename) == false){
				File.WriteAllText(path + "/" + directory + "/" + filename + "." + filetype, fileData);
			}
			else{
				Debug.LogError("The file " + filename + " already exists in " + path + "/" + directory);
			}
		}
		else{
			Debug.LogError("Unable to create file as the directory " + directory + " does not exist");
		}
	}

	public string ReadFile(string directory, string filename, string filetype){
		Debug.Log("Reading " + directory + "/" + filename + "." + filetype);
		if(CheckDirectory(directory) == true){
			if(CheckFile(directory + "/" + filename + "." + filetype) == true){
				string fileContents = File.ReadAllText(path + "/" + directory + "/" + filename + "." + filetype);
				return fileContents;
			}
			else{
				Debug.LogError("The file " + filename + " does not exist in " + path + "/" + directory);
				return null;
			}
		}
		else{
			Debug.LogError("Unable to read the file as the directory " + directory + " does not exist");
			return null;
		}
	}

	public void DeleteFile(string filePath){
		if(File.Exists(path + "/" + filePath)){
			File.Delete(path + "/" + filePath);
		}
		else{
			Debug.LogError("Unable to delete file as it does not exist");
		}
	}

	public void UpdateFile(string directory, string filename, string filetype, string fileData, string mode){
		Debug.Log("Updating " + directory + "/" + filename + "." + filetype);
		if(CheckDirectory(directory) == true){
			if(CheckFile(directory + "/" + filename + "." + filetype) == true){
				if(mode == "replace"){
					File.WriteAllText(path + "/" + directory + "/" + filename + "." + filetype, fileData);
				}
				else if(mode == "append"){
					File.AppendAllText(path + "/" + directory + "/" + filename + "." + filetype, fileData);
				}
			}
			else{
				Debug.LogError("The file " + filename + " does not exist in " + path + "/" + directory);
			}
		}
		else{
			Debug.LogError("Unable to create file as the directory " + directory + " does not exist");
		}
	}

	public void ProcessFile(string filepath){
		Debug.Log("Processing " + filepath);
		string fileContents = File.ReadAllText(filepath);
		Debug.Log("Read file which contains " + fileContents);
	}

	public void CreateXMLFile(string directory, string filename, string filetype, string fileData, string mode){
		Debug.Log("Creating XML File in " + directory);

		if(CheckDirectory(directory) == true){
			if(mode == "plaintext"){
				File.WriteAllText(path + "/" + directory + "/" + filename + "." + filetype, fileData);
			}

			if(mode == "encrypt"){
				fileData = EncryptData(fileData);
				File.WriteAllText(path + "/" + directory + "/" + filename + "." + filetype, fileData);
			}
		}
		else{
			Debug.LogError("Unable to create file as the directory " + directory + " does not exist");
		}
	}

	public virtual string BuildXMLData(){
		Debug.Log("Creating default XML");

		XmlDocument xmlDoc = new XmlDocument();

		/*
		XmlElement rootElement = xmlDoc.CreateElement("player");
		xmlDoc.AppendChild(rootElement);

		XmlElement profileElement = xmlDoc.CreateElement("profile");
		XmlElement profileInnerElement;

		profileInnerElement = xmlDoc.CreateElement("playername");
		profileInnerElement.InnerText = "PLAYER_01";
		profileElement.AppendChild(profileInnerElement);

		rootElement.AppendChild(profileElement);

		XmlElement inventoryElement = xmlDoc.CreateElement("inventory");
		XmlElement inventoryItem = xmlDoc.CreateElement("item");
		inventoryItem.SetAttribute("name", "item_01");
		inventoryElement.AppendChild(inventoryItem);

		rootElement.AppendChild(inventoryElement);
		*/

		/*
		string xmlString;
		xmlString = "<?xml version = \"1.0\" encoding = \"utf-8\"?>";
		xmlString += "<player>";
		xmlString += "<profile>";
		xmlString += "</profile>";
		xmlString += "<inventory>";
		xmlString += "<item name = \"item_00\" />";
		xmlString += "</inventory>";
		xmlString += "</player>";
		*/

		/*
		XmlElement rootElement = CreateXMLElement(xmlDoc, "player", "", null, null);
		xmlDoc.AppendChild(rootElement);
		
		XmlElement profileElement = CreateXMLElement(xmlDoc, "profile", "", null, null);
		profileElement.AppendChild(CreateXMLElement(xmlDoc, "playername", "PLAYER_01", null, null));
		
		rootElement.AppendChild(profileElement);
		
		XmlElement inventoryElement = CreateXMLElement(xmlDoc, "inventory", "", null, null);
		inventoryElement.AppendChild(CreateXMLElement(xmlDoc, "item", "", new string[]{"name", "qty"}, new string[]{"item_01", "2"}));
		
		rootElement.AppendChild(inventoryElement);
		*/

		return xmlDoc.OuterXml;
	}

	private XmlElement CreateXMLElement(XmlDocument xmlObject, string elementName, string innerValue, string[] attributeList, string[] attributeValues){
		XmlElement element = xmlObject.CreateElement(elementName);

		if(innerValue != null){
			element.InnerText = innerValue;
		}

		if(attributeList != null){
			int i = 0;
			foreach(string attribute in attributeList){
				element.SetAttribute(attribute, attributeValues[i]);
				i++;
			}
		}
		return element;
	}

	public virtual void ParseXMLFile(string directory, string filename, string filetype, string mode){
		Debug.Log("Reading XML File in " + directory);
		if(mode == "plaintext"){
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.Load(path + "/" + directory + "/" + filename + "." + filetype);

			/*
			XmlNodeList profileList = xmlDoc.GetElementsByTagName("profile");

			foreach(XmlNode profileInfo in profileList){
				XmlNodeList profileContent = profileInfo.ChildNodes;

				foreach(XmlNode profileItems in profileContent){
					if(profileItems.Name == "playername"){
						Debug.Log("playername: " + profileItems.InnerText);
					}
				}
			}

			XmlNodeList inventoryList = xmlDoc.GetElementsByTagName("inventory");

			foreach(XmlNode inventoryInfo in inventoryList){
				XmlNodeList inventoryContent = inventoryInfo.ChildNodes;
				foreach(XmlNode inventoryItems in inventoryContent){
					Debug.Log("Item: " +inventoryItems.Attributes["name"].Value);
				}
			}
			*/


		}
	}

	public string EncryptData(string toEncrypt){
		byte[] keyArray = UTF8Encoding.UTF8.GetBytes("1812laaventura");

		byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);
		RijndaelManaged rDel = new RijndaelManaged();

		rDel.Key = keyArray;
		rDel.Mode = CipherMode.ECB;

		rDel.Padding = PaddingMode.PKCS7;

		ICryptoTransform cryptoTransform = rDel.CreateEncryptor();
		byte[] resultArray = cryptoTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

		return Convert.ToBase64String(resultArray, 0, resultArray.Length);
	}

	public string DecryptData(string toDecrypt){
		byte[] keyArray = UTF8Encoding.UTF8.GetBytes("1812laaventura");

		byte[] toEncryptArray = Convert.FromBase64String(toDecrypt);
		RijndaelManaged rDel = new RijndaelManaged();
		rDel.Key = keyArray;
		rDel.Mode = CipherMode.ECB;

		rDel.Padding = PaddingMode.PKCS7;

		ICryptoTransform cryptoTransform = rDel.CreateDecryptor();

		byte[] resultArray = cryptoTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

		return UTF8Encoding.UTF8.GetString(resultArray);
	}
	
}
