/*	This file is part of 1812: La aventura.

    1812: La aventura is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    1812: La aventura is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with 1812: La aventura.  If not, see <http://www.gnu.org/licenses/>.
*/

using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class MouseTargetingController : MonoBehaviour {
	private Vector3 mousePosition;
	private Player player;
	private float lastTimeMouseClicked;
	private const float delayBetweenMouseClicks = 0.5f ;
	private List<string> textToDisplayIfNothingIsInteresting;

	private enum hitTypes{
		walkableFloor = 0,
		sceneryObject,
		npc,
		inventoryItem,
		noType
	}

	void Start () {
		player = this.gameObject.GetComponent<Player>();
		textToDisplayIfNothingIsInteresting = new List<string>();
		textToDisplayIfNothingIsInteresting.Add("GUI");
		textToDisplayIfNothingIsInteresting.Add("NOTHING_OF_INTEREST");
		textToDisplayIfNothingIsInteresting.Add("DEFAULT");

	}

	void Update () {
		if(!player.isInteracting && !player.isSpeaking && player.hasEndedGrabbing && ((Time.time - lastTimeMouseClicked) > delayBetweenMouseClicks)){
			if(Input.GetMouseButtonDown(0)){
				lastTimeMouseClicked = Time.time;
				GameObject hitObject;
				hitTypes currentHitType = hitTypes.noType;
				currentHitType = GetHitObject(out hitObject);

				switch(currentHitType){
				case hitTypes.inventoryItem:
					player.DescribeItemInventory(hitObject.GetComponent<ItemInventory>());
					break;
				case hitTypes.sceneryObject: 
					InteractiveObject interactiveObject = hitObject.GetComponent<InteractiveObject>();
					//player.GoToAndDescribe(interactiveObject);
					interactiveObject.LeftClickAction();
					break;
				case hitTypes.npc:
					Actor actor = hitObject.GetComponent<Actor>();
					actor.LeftClickAction();
					break;
				case hitTypes.walkableFloor:
					player.GoTo(mousePosition);
					break;
				default:
					break;
				}

				/*
				switch(hit.collider.transform.tag){
				case "ItemInventory":
					player.DescribeItemInventory(hit.collider.gameObject.GetComponent<ItemInventory>());
					break;
					
				case "InteractivePoint":
					//if(!playerIsDoingAnAction && !player.isGoingToDirectionChanged){
						playerIsDoingAnAction = true;
						InteractiveObject interactiveObject = hit.collider.gameObject.GetComponent<InteractiveObject>();
						player.GoTo(interactiveObject.position);
						player.Describe(interactiveObject);
						playerIsDoingAnAction = false;
					//}
					break;
					
				case "NavigationPolygon": case "NavigationLinks":
					//if(playerIsDoingAnAction){
						player.isGoingToDirectionChanged = true;
						player.GoTo(mousePosition);
					//}
					break;
				default:
					break;
				}
				*/
			}
			else if(Input.GetMouseButtonDown(1)){
				lastTimeMouseClicked = Time.time;
				GameObject hitObject;
				hitTypes currentHitType = hitTypes.noType;
				currentHitType = GetHitObject(out hitObject);

				switch(currentHitType){
				case hitTypes.inventoryItem:
					player.isUsingItemInventory = true;
					break;
				case hitTypes.sceneryObject:
					if(!player.isUsingItemInventory){
						InteractiveObject interactiveObject = hitObject.GetComponent<InteractiveObject>();
						//player.GoTo(interactiveObject.position);
						//player.Action(interactiveObject);
						//player.RightClickAction(interactiveObject);
						interactiveObject.RightClickAction();
					}
					else{
						player.isUsingItemInventory = false;
					}
					break;
				case hitTypes.npc:
					if(!player.isUsingItemInventory){
						Actor actor = hitObject.GetComponent<Actor>();
						actor.RightClickAction();
					}
					else{
						player.isUsingItemInventory = false;
					}
					break;
				case hitTypes.walkableFloor:
					//startTime = Time.time;
					player.isUsingPhone = false;
					player.Speak(textToDisplayIfNothingIsInteresting);
					break;
				default:
					break;
				}

				/*
				switch(hit.collider.transform.tag){
				case "ItemInventory":
					player.isUsingItemInventory = true;
					break;
					
				case "InteractivePoint":
					//if(!playerIsDoingAnAction){
						playerIsDoingAnAction = true;
						if(!player.isUsingItemInventory){
							InteractiveObject interactiveObject = hit.collider.gameObject.GetComponent<InteractiveObject>();

							player.GoTo(interactiveObject.position);
							player.Action(interactiveObject);

						}
						else{
							player.isUsingItemInventory = false;
						}
						playerIsDoingAnAction = false;
					//}
					break;
					
				case "NavigationPolygon": case "NavigationLinks":
					player.GoTo(mousePosition);
					break;
				default:
					break;
				}
		*/
			}
			//else if((Time.time - startTime) > timeUntilWaitingAnimation){
			//	player.isUsingPhone = true;
			//}

		}

		//if(player.isInteracting || player.isSpeaking || player.isGoingToDirection){
			//Debug.Log("Time reset");
		//	startTime = Time.time;
		//	player.isUsingPhone = false;
		//}

	}

	private hitTypes GetHitObject(out GameObject hitObject){
		
		mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
		RaycastHit2D[] hits = Physics2D.RaycastAll(new Vector2(mousePosition.x, mousePosition.y), Vector2.zero, 0f);
		
		int currentSelectedHit = 0;
		hitTypes currentHitType = hitTypes.noType;
		
		for(int hitIterator = 0; hitIterator < hits.Length; hitIterator++){
			if(hits[hitIterator].collider != null){
				switch(hits[hitIterator].collider.transform.tag){
				case "ItemInventory":
					currentHitType = hitTypes.inventoryItem;
					currentSelectedHit = hitIterator;
					break;
					
				case "InteractivePoint":
					if(currentHitType == hitTypes.noType || currentHitType == hitTypes.walkableFloor){
						currentHitType = hitTypes.sceneryObject;
						currentSelectedHit = hitIterator;
					}
					break;
					
				case "NavigationPolygon": case "NavigationLinks":
					if(currentHitType == hitTypes.noType){
						currentHitType = hitTypes.walkableFloor;
						currentSelectedHit = hitIterator;
					}
					break;
				
				case "NPC":
					if(currentHitType == hitTypes.noType || currentHitType == hitTypes.walkableFloor || currentHitType == hitTypes.sceneryObject){
						currentHitType = hitTypes.npc;
						currentSelectedHit = hitIterator;
                        }
					break;

				default:
					break;
				}
			}
		}
		if(currentHitType == hitTypes.noType){
			hitObject = null;
		}
		else{
			hitObject = hits[currentSelectedHit].collider.gameObject;
		}
		
		return currentHitType;
	}
    
}
