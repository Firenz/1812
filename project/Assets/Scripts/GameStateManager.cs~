using UnityEngine;
using System.Collections;

public class GameStateManager : MonoBehaviour {
	private static GameStateManager instance;

	public static GameStateManager Instance{
		get{
			if(instance == null){
				instance = new GameObject("GameStateManager").AddComponent<GameStateManager>();
				DontDestroyOnLoad(instance.gameObject);
			}
			return instance;
		}
	}

	public GameStateData currentGameState{
		get;
		private set;
	}

	/*
	public CutScenesController cutscenes{
		get;
		private set;
	}
	*/

	public delegate void EnableInventory();
	public static event EnableInventory enableInventory;
	public delegate void DisableInventory();
	public static event DisableInventory disableInventory;
	public delegate void EnableButton();
	public static event EnableButton enableButton;
	public delegate void DisableButton();
	public static event DisableButton disableButton;
	
	private void Awake() {
		if(instance == null){
			instance = this;
			DontDestroyOnLoad(this);
			StartState();
		}
		else{
			if(this != instance){
				Destroy(this.gameObject);
			}
		}
	}

		//CutScenesController.Instance.Initialize();
		//SaveGameFile();
		//currentGameStat

	private void OnDestroy () {
		if (instance == this) {
			instance = null;
		}
	}

	private void OnApplicationQuit(){
		instance = null;
	}

	public void StartState(){
		Debug.Log("Creating a new game state");
		currentGameState = new GameStateData();
		currentGameState.InitializeData();
	}

	public void SaveGameState(int scene){
		currentGameState.UpdateData(scene);
	}

	public void LoadGameState(int newScene){
		switch(newScene){
		case 0 :
			enableInventory();
			enableButton();
			currentGameState.SetLevel("DemoScene_00");
			currentGameState.lastPlayableLevelID = 0;
			currentGameState.SetPlayerPosition(currentGameState.professorOfficeInfo.playerPosition);
			break;
		case 1 :
			disableInventory();
			enableButton();
			currentGameState.SetLevel("DemoScene_01");
			currentGameState.lastPlayableLevelID = 1;
			currentGameState.SetPlayerPosition(currentGameState.corridorInfo.playerPosition);
			break;
		default:
			disableInventory();
			disableButton();
			break;
		}
	}

	public void ChangeScene(int originalScene, int newScene){
		SaveGameState(originalScene);
		Debug.Log("Preload new scene");
		Application.LoadLevel(newScene);
		Debug.Log("Loaded new scene");
		LoadGameState(newScene);
	}

	public void SaveGameFile(int gameFileSlot = 0){
		GameFileManager.Instance.SaveGameFile(gameFileSlot, currentGameState);
	}

	public GameStateData LoadGameFile(int gameFileSlot = 0){
		return GameFileManager.Instance.LoadGameFile(gameFileSlot);
	}
	
}

public class GameStateData{
	public int lastPlayableLevelID;
	public string lastPlayableLevel;
	public Vector2 playerPosition;
	//private string stateName;

	public class SystemData{
		public struct ScreenSettings{
			public int width;
			public int height;
			public bool fullscreen;
		}
		public string currentLanguage;
		public ScreenSettings screenSettings;
	}
	
	public class ProfessorOfficeData{
		public Vector2 playerPosition;
		public bool isWindowsClosed;
		public bool isLittleFlagsActive;

		/*
		public void UpdateData(Vector2 position, bool isClosed, bool hasBeenPicked){

		}

		public void SetPlayerPosition(Vector2 position){
			playerPosition = position;
		}
		*/
	}
	
	public class CorridorData{
		public Vector2 playerPosition;
		//public bool hasNPCBeenTalkedBefore;
		public int timesTrashBinHasBeenSearched;

	}

	public class CutScenesData{
		public bool firstTimeInCorridor;
	}

	public SystemData systemInfo{
		get;
		set;
	}
	
	public ProfessorOfficeData professorOfficeInfo{
		get;
		set;
	}
	
	public CorridorData corridorInfo{
		get;
		set;
	}

	public CutScenesData cutScenesInfo{
		get;
		set;
	}

	public Vector2 GetPlayerPosition(){
		return playerPosition;
	}

	public void SetPlayerPosition(Vector2 position){
		playerPosition = position;
	}

	public void SetLevel(string newLevel){
		lastPlayableLevel = newLevel;
	}

	public string GetLevel(){
		return lastPlayableLevel;
	}

	public void InitializeData(){
		lastPlayableLevel = "DemoScene_01";
		playerPosition = Vector2.zero;
		lastPlayableLevelID = 1;

		systemInfo = new SystemData();
		corridorInfo = new CorridorData();
		professorOfficeInfo = new ProfessorOfficeData();
		cutScenesInfo = new CutScenesData();

		systemInfo.currentLanguage = "ES";
		systemInfo.screenSettings.width = 640;
		systemInfo.screenSettings.height = 480;
		systemInfo.screenSettings.fullscreen = false;

		corridorInfo.playerPosition = new Vector2(61.2f, 62.1f);
		//corridorInfo.hasNPCBeenTalkedBefore = false;
		corridorInfo.timesTrashBinHasBeenSearched = 0;

		professorOfficeInfo.playerPosition = new Vector2(236.0f, 68.5f);
		professorOfficeInfo.isWindowsClosed = false;
		professorOfficeInfo.isLittleFlagsActive = true;

		cutScenesInfo.firstTimeInCorridor = false;
	}

	public void UpdateData(int scene){
		switch(scene){
		default:
			break;
		case 0: 
			professorOfficeInfo.isWindowsClosed = GameObject.Find("Window").GetComponent<Window>().isWindowsClosed;
			professorOfficeInfo.playerPosition = GameObject.Find("Player").GetComponent<Transform>().position;
			professorOfficeInfo.isLittleFlagsActive = GameObject.Find("LittleFlags").GetComponent<LittleFlags>().isGivableObjectActive;
			//ProfessorOfficeData.playerPosition = GameObject.Find("Player").GetComponent<Transform>().position;
			break;
		case 1: 
			corridorInfo.timesTrashBinHasBeenSearched = GameObject.Find("TrashBin").GetComponent<TrashBin>().timesTrashBinHasBeenInteracted;
			corridorInfo.playerPosition = GameObject.Find("Player").GetComponent<Transform>().position;
			//CorridorData.playerPosition = GameObject.Find("Player").GetComponent<Transform>().position;

			//cutScenesInfo.firstTimeInCorridor = GameObject.Find("GameController").GetComponent<CutScenesController>().firstTimeInCorridor;
			cutScenesInfo.firstTimeInCorridor = CutScenesController.firstTimeInCorridor;
			break;
		case 2:
			systemInfo.currentLanguage = TextLocalization.currentLanguage;
			systemInfo.screenSettings.width = Screen.width;
			systemInfo.screenSettings.height = Screen.height;
			systemInfo.screenSettings.fullscreen = Screen.fullScreen;
			break;
		}
	}
	
}
